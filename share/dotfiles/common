#!/usr/bin/env bash

color_white='\033[1;37m'
color_green='\033[1;32m'
color_red='\033[1;33m'
color_end='\033[0m'

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

modules=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

xdg_data_files=(fonts themes icons)
xdg_config_files=(asdf systemd environment.d fzf X11)

# Verifying available commands / programs
if command -v alacritty > /dev/null
then
  xdg_config_files+=(alacritty)
fi

if command -v gammastep > /dev/null
then
  xdg_config_files+=(gammastep)
fi

if command -v mako > /dev/null
then
  xdg_config_files+=(mako)
fi

if command -v nvim > /dev/null
then
  xdg_config_files+=(nvim)
fi

if command -v swappy > /dev/null
then
  xdg_config_files+=(swappy)
fi

if command -v sway > /dev/null
then
  xdg_config_files+=(sway)
fi

if command -v swaylock > /dev/null
then
  xdg_config_files+=(swaylock)
fi

if command -v waybar > /dev/null
then
  xdg_config_files+=(waybar)
fi

if command -v wofi > /dev/null
then
  xdg_config_files+=(wofi)
fi

if command -v yay > /dev/null
then
  xdg_config_files+=(yay)
fi

if command -v zsh > /dev/null
then
  xdg_config_files+=(zsh)
fi

function setup_files {
  local prefix=$1
  shift
  local array_of_files=($@)

  for file in "${array_of_files[@]}"
  do
    printf "${color_white}${file}${color_end}\n"

    # modules
    if [[ $* != *--no-modules* ]]
    then
    for module in $modules
    do
      if [[ $module = *"${file}"* ]]
      then
        printf "  - Downloading module: ${module}\n"
        git submodule update --remote --quiet --init --depth 1 ${PWD}/${module} &>/dev/null
        printf "  - ${color_green}Download complete${color_end}\n"
      fi
    done
    fi

    link_path="${prefix}${file}"
    dotfile_path="${PWD}/${file}"

    # Symbolic link
    if [ -h $link_path ]
    then
      if [ "$(readlink $link_path)" = $dotfile_path ]
      then
        printf "  - Link exists: ${link_path}\n"
      else
        printf "  - ${color_red}Warning${color_end}: ${link_path} already exists\n"
      fi
    else
      ln -s "${dotfile_path}" "${link_path}"
      printf "  - ${color_green}Link created${color_end}: ${link_path}\n"
    fi
  done
}

function remove_files {
  local prefix=$1
  shift
  local array_of_files=($@)

  for file in "${array_of_files[@]}"
  do
    printf "${color_white}${file}${color_end}\n"

    link_path="${prefix}${file}"
    dotfile_path="${PWD}/${file}"

    # Symbolic link
    if [ -h "${link_path}" ]
    then
      if [ "$(readlink "${link_path}")" = "${dotfile_path}" ]
      then
        rm "${link_path}"
      printf "  - ${color_green}Link removed${color_end}: ${link_path}\n"
      fi
    fi
  done
}
